<!DOCTYPE HTML>
<html>
    <head>
        <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
        <title>テスト</title>
        <meta http-equiv="content-style-type" content="text/css" />
        <meta name="viewport" content="width=device-width" />
        <meta name="keywords" content="" />
        <meta name="description" content="" />
        <meta name="theme-color" content="#FFAA00">
        <link rel="SHORTCUT ICON" href="./favicon.png" />
        <link rel="stylesheet" href="css/common.css" />
        <script src="jquery/jquery.js"></script>
        <script src="js/reconnecting-websocket.js"></script>
        <script>
          const publicVapidKey = '<%= vapidPrivateKey %>';

          async function subscribe() {
              await navigator.serviceWorker.register('sw.js', {
                scope: '/'
              });
              navigator.serviceWorker.ready
                .then((registration) => {
                  return registration.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: urlBase64ToUint8Array(publicVapidKey),
                  });
                }).then(async (subscription) => {
                fetch('/chat/api/subscribe', {
                  method: 'POST',
                  body: JSON.stringify({subscription}),
                  headers: {
                    'Content-Type': 'application/json'
                  }
                }).then(async (response) => {
                  console.log(await response.json())
                })
              })
            }

            function urlBase64ToUint8Array(base64String) {
              const padding = '='.repeat((4 - (base64String.length % 4)) % 4);
              const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
              const rawData = atob(base64);
              const outputArray = new Uint8Array(rawData.length);

              for (let i = 0; i < rawData.length; ++i) {
                outputArray[i] = rawData.charCodeAt(i);
              }
              return outputArray;
            }

            function onSubscribe() {
              console.log('@onSubscribe')
              if(!window.Notification){
                alert('Push通知が対応していません')
                return
              }
              Notification.requestPermission().then((permission) => {
                if (permission === 'granted') {
                  subscribe()
                } else {
                  alert('Push通知が許可されていません。')
                }
              })
            }

            function onNotification(data) {
              fetch('/chat/api/notification', {
                method: 'POST',
                data
              }).then(() => {
                console.log("push send.")
              })
            }


            var host = location.origin.replace(/^http/, 'ws') + "?roomId=<%= roomId %>"
            
            var ws = new ReconnectingWebSocket(host);
            ws.reconnectInterval = 60000;
            var msg_limit = 20;
            var userId = "<%= userId %>";

            // メッセージの受信
            ws.addEventListener('message', function (e) {
              var data = JSON.parse(e.data);
              console.log(data);
              setMessage(data);

            });

            // メッセージの送信
            function soshin(){
                var message = document.getElementById('message');
                var roomId = "<%= roomId %>";
                var userId = "<%= userId %>";
                var userName = "<%= userName %>";
                var json = {userId: userId, roomId: roomId, userName: userName, message: message.value};
                ws.send(JSON.stringify(json),function(){}); // 送信
                onNotification(json);// 通知
                message.value = '';
            }

            function setMessage(data){
              if(userId == data.userId){
                messages = $("#messages").prepend('  <div class="chat-box">' +
                                                        '<div class="chat-face"><img src="img/images.jpg" alt="自分" width="90" height="90"></div>' +
                                                        '<div class="chat-hukidashi">' + data.message + '</div>' +
                                                        '</div>' +
                                                        '<div align="left" class="chat-date">' + data.date + '</div>' +
                                                        '<div align="left" class="chat-date">　' + data.userName||data.userId + ' さん</div>' +
                                                        '<div class="clear_line1"></div>' +
                                                      '</div>');
              }else{
                // Androidで振動通知
                var isVibrate = navigator.vibrate || navigator.webkitVibrate || navigator.mozVibrate || navigator.msVibrate;
                if(isVibrate){
                  navigator.vibrate([100,50,100]);
                }

                messages = $("#messages").prepend('  <div class="chat-box">' +
                                                        '<div class="chat-face"><img src="img/someone.jpg" alt="相手" width="90" height="90"></div>' +
                                                        '<div class="chat-hukidashi someone">' + data.message + '</div>' +
                                                        '</div>' +
                                                        '<div align="left" class="chat-date">' + data.date + '</div>' +
                                                        '<div align="left" class="chat-date">　' + data.userName||data.userId + ' さん</div>' +
                                                        '<div class="clear_line1"></div>' +
                                                      '</div>');
              }
            }

            // １０秒ごとに空の文字列を送信（こうしないとなぜか切断されてしまう）
            setInterval(function(){ws.send('', function(){});}, 10000);
          

          $(function(){
            $.get('/chat/init?roomId=<%= roomId %>',function(data){
                console.log(data);
                data.forEach(function(val, key){
                  console.log(val);
                  setMessage(val);

                });
            });
          });
        </script>

    </head>
    <body>
        <h1>チャットテスト</h1>
        <div>
          <button onclick="onSubscribe()">通知を登録</button>
      </div>
      
        <div align="right"><a href="/logout"><input type="button" name="button" value="ログアウト" class="btn d_glay"></a></div>
        <div class="clear_line1"></div>

        <div class="frame_inner">
          <div class="frame">
            <div id="messages"/>
            <div class="clear_line1"></div>
            <div align="right">
              <form action="chat/delete" method="post">
                <input type="hidden" name="roomId" value="<%= roomId %>"/>
                <input type="submit" name="submit" value="ログ削除" class="btn d_glay"/>
              </form>
            </div>
          </div>
        </div>
        <div class="clear_line1"></div>
        

        <div class="send-box">
          <input type="text" value="" id="message" />
          <input type="button" value="送信" onclick="soshin();" class="btn"/>
          <input type="button" value="更新" onclick="javascript:location.reload();" class="btn"/>
        </div>
    </body>
</html>
